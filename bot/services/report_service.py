# bot/services/report_service.py

import os
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from typing import Dict
from io import BytesIO

from sqlalchemy.orm import Session
from bot.models.user import User
from bot.models.consumption import Consumption
from bot.models.alcohol_type import AlcoholType


def generate_report(session: Session, user: User):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ (str)
    - —Å–ª–æ–≤–∞—Ä—å report_data –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    seven_days_ago = datetime.utcnow() - timedelta(days=7)
    consumptions = (
        session.query(Consumption)
        .join(AlcoholType)
        .filter(Consumption.user_id == user.id)
        .filter(Consumption.timestamp >= seven_days_ago)
        .all()
    )

    if not consumptions:
        return "–í—ã –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.", None
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ report_data –Ω–µ –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    report_data: Dict[str, Dict[str, float]] = {}
    total_absolute = 0.0
    total_cost = 0.0

    for consumption in consumptions:
        alc_type = consumption.alcohol_type
        name = alc_type.name

        # –õ–∏—Ç—Ä—ã
        display_amount = consumption.amount
        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Å–ø–∏—Ä—Ç
        absolute = consumption.amount * (alc_type.alcohol_content / 100.0)
        # –°—Ç–æ–∏–º–æ—Å—Ç—å
        cost = consumption.price

        if name not in report_data:
            report_data[name] = {
                'display_amount': 0.0,
                'absolute': 0.0,
                'cost': 0.0
            }

        report_data[name]['display_amount'] += display_amount
        report_data[name]['absolute'] += absolute
        report_data[name]['cost'] += cost

        total_absolute += absolute
        total_cost += cost

    lines = ["üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"]
    for name, data in report_data.items():
        lines.append(
            f"‚Ä¢ {name}:\n"
            f"  ‚îî –í—ã–ø–∏—Ç–æ: {data['display_amount']:.2f} –ª\n"
            f"  ‚îî –ß–∏—Å—Ç—ã–π –∞–ª–∫–æ–≥–æ–ª—å: {data['absolute']:.2f} –ª\n"
            f"  ‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']:.2f} —Ä—É–±\n"
        )

    lines.append(f"\nüîª –í—Å–µ–≥–æ —á–∏—Å—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è: {total_absolute:.2f} –ª")
    lines.append(f"üîª –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_cost:.2f} —Ä—É–±")

    text_report = "\n".join(lines)

    return text_report, report_data


def render_chart_to_buffer(report_data: Dict[str, Dict[str, float]]) -> BytesIO:
    """
    –°—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (–∏—Å–ø–æ–ª—å–∑—É—è report_data)
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç BytesIO —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.
    """
    buf = BytesIO()
    buf.seek(0)

    names = list(report_data.keys())
    values = [v['absolute'] for v in report_data.values()]

    plt.figure(figsize=(10, 6))
    plt.bar(names, values, color='#4B96E9')
    plt.title("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º")
    plt.ylabel("–õ–∏—Ç—Ä—ã")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()

    plt.savefig(buf, format='png')
    plt.close()

    buf.seek(0)
    return buf
