# bot/handlers/add_alcohol.py

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from bot.logger import logger
from bot.utils.db import SessionLocal
from bot.services.user_service import get_user, create_user
from bot.services.alcohol_service import (
    create_alcohol_type,
    get_top_alcohol_types
)
from bot.models.consumption import Consumption
from bot.handlers.start import start

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(CHOOSE_FAV_DRINK, ASK_NAME, ASK_CONTENT, ASK_AMOUNT, ASK_PRICE) = range(5)


async def inline_add_alcohol_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ + ¬´–î—Ä—É–≥–æ–π¬ª (inline).
    2) –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler:
       ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫–∏.
    3) –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (inline_add_alcohol_callback) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∞–∂–º—É—Ç ¬´fav:...¬ª
       –∏–ª–∏ ¬´other_new_drink¬ª.
    """
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è (inline).")

    query = update.callback_query  # –í—ã–∑—ã–≤–∞–µ–º—Å—è –∏–∑ CallbackQueryHandler
    await query.answer()           # –£–±–∏—Ä–∞–µ–º "..."

    chat_id = update.effective_chat.id

    session = SessionLocal()
    try:
        top_alcohols = get_top_alcohol_types(session, limit=6)
        buttons = []
        for alc in top_alcohols:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É callback_data="fav:<id>"
            buttons.append([InlineKeyboardButton(alc.name, callback_data=f"fav:{alc.id}")])

        # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–æ–π"
        buttons.append([InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data="other_new_drink")])

        reply_markup = InlineKeyboardMarkup(buttons)

        await context.bot.send_message(
            chat_id=chat_id,
            text="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π':",
            reply_markup=reply_markup
        )
    finally:
        session.close()


async def inline_add_alcohol_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π "fav:<id>" –∏–ª–∏ "other_new_drink".
       –ó–¥–µ—Å—å –º—ã –≤—Ö–æ–¥–∏–º –≤ ConversationHandler, –≤–æ–∑–≤—Ä–∞—â–∞—è ASK_AMOUNT –∏–ª–∏ ASK_NAME.
    """
    query = update.callback_query
    await query.answer()

    data = query.data  # "fav:5" –∏–ª–∏ "other_new_drink"
    logger.info(f"inline_add_alcohol_callback data={data}")

    if data.startswith("fav:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫
        alc_id_str = data.split(":")[1]
        alc_id = int(alc_id_str)
        context.user_data['alcohol_type_id'] = alc_id

        from bot.models.alcohol_type import AlcoholType
        session = SessionLocal()
        try:
            alc_obj = session.query(AlcoholType).get(alc_id)
            if alc_obj:
                context.user_data['alcohol_name'] = alc_obj.name
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (litre)
                await query.edit_message_text(f"üìè –°–∫–æ–ª—å–∫–æ {alc_obj.name} –≤—ã –≤—ã–ø–∏–ª–∏? (–≤ –ª–∏—Ç—Ä–∞—Ö)")
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ASK_AMOUNT")
                return ASK_AMOUNT
            else:
                await query.edit_message_text("‚ö†Ô∏è –ù–∞–ø–∏—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return ConversationHandler.END
        finally:
            session.close()

    elif data == "other_new_drink":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞:")
        return ASK_NAME

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END


async def ask_alcohol_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ (ASK_NAME -> ASK_CONTENT): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –∫—Ä–µ–ø–æ—Å—Ç—å (0..100).
    """
    logger.info("ask_alcohol_content –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    context.user_data['alcohol_name'] = update.message.text.strip()
    await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞ (0..100):")
    return ASK_CONTENT


async def create_new_alcohol_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–∏–ø –≤ –ë–î, –∑–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (ASK_AMOUNT).
    """
    logger.info("create_new_alcohol_type –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    session = SessionLocal()
    try:
        content_str = update.message.text.replace(',', '.')
        content = float(content_str)
        if not (0 <= content <= 100):
            raise ValueError

        new_alcohol = create_alcohol_type(
            session=session,
            name=context.user_data['alcohol_name'],
            alcohol_content=content
        )
        context.user_data['alcohol_type_id'] = new_alcohol.id
        context.user_data['alcohol_name'] = new_alcohol.name

        await update.message.reply_text(
            text=(
                f"–ù–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫ '{new_alcohol.name}' (–∫—Ä–µ–ø–æ—Å—Ç—å: {content}%) –¥–æ–±–∞–≤–ª–µ–Ω.\n"
                f"üìè –°–∫–æ–ª—å–∫–æ {new_alcohol.name} –≤—ã –≤—ã–ø–∏–ª–∏? (–≤ –ª–∏—Ç—Ä–∞—Ö)"
            )
        )
        return ASK_AMOUNT
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")
        return ASK_CONTENT
    finally:
        session.close()


async def ask_alcohol_volume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ ASK_AMOUNT: –≤–≤–æ–¥ –æ–±—ä—ë–º–∞ (–ª–∏—Ç—Ä–æ–≤), –ø–æ—Ç–æ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É (ASK_PRICE).
    """
    logger.info("ask_alcohol_volume –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    text = update.message.text.replace(',', '.')
    try:
        amount = float(text)
        if amount <= 0:
            raise ValueError
        context.user_data['amount'] = amount
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {amount}")
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—ä—ë–º–∞: {text}")
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ª–∏—Ç—Ä—ã):")
        return ASK_AMOUNT

    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ASK_PRICE")
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±) –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:")
    return ASK_PRICE

async def save_consumption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ ASK_PRICE: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –ë–î –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    logger.info("save_consumption –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    session = SessionLocal()
    user = None
    try:
        price_str = update.message.text.replace(',', '.')
        price = float(price_str)
        if price < 0:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

        telegram_id = update.effective_user.id
        username = update.effective_user.username
        user = get_user(session, telegram_id)
        if not user:
            user = create_user(session, telegram_id, username)

        alcohol_type_id = context.user_data['alcohol_type_id']
        alcohol_name = context.user_data['alcohol_name']
        amount = context.user_data['amount']

        consumption = Consumption(
            user_id=user.id,
            alcohol_type_id=alcohol_type_id,
            amount=amount,
            price=price
        )
        session.add(consumption)
        session.commit()

        await update.message.reply_text(
            text=(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                f"‚Ä¢ –ù–∞–ø–∏—Ç–æ–∫: {alcohol_name}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –ª\n"
                f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±\n"
            )
        )
    except ValueError as ve:
        await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {ve}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (—Ä—É–±):")
        return ASK_PRICE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Consumption: {e}")
        if user:
            logger.error(f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user.id={user.id}, telegram_id={user.telegram_id}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    finally:
        session.close()
        context.user_data.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)
    return ConversationHandler.END


# ConversationHandler: –≤–∫–ª—é—á–∞–µ–º per_message=True,
# —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ inline-callback
add_alcohol_conv_handler = ConversationHandler(
    entry_points=[
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç "fav:" —Å –ª—é–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø–æ—Å–ª–µ
        CallbackQueryHandler(inline_add_alcohol_callback, pattern=r"^fav:\d+|other_new_drink$")
    ],
    states={
        ASK_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_alcohol_content)
        ],
        ASK_CONTENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, create_new_alcohol_type)
        ],
        ASK_AMOUNT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_alcohol_volume)
        ],
        ASK_PRICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_consumption)
        ],
    },
    fallbacks=[
        CommandHandler('cancel', lambda u, c: ConversationHandler.END)
    ],
    per_chat=True
)
